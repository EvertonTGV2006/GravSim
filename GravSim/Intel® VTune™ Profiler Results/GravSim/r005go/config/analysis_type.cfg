<?xml version="1.0" encoding="UTF-8"?>
<bag xmlns:boolean="http://www.w3.org/2001/XMLSchema#boolean" xmlns:exsl="http://exslt.org/common" xmlns:int="http://www.w3.org/2001/XMLSchema#int" xmlns:str="http://exslt.org/strings" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
 <internal>
  <name>%GpuOffloadAtypeName</name>
  <shortName>%GpuOffloadAtypeName</shortName>
  <description>%GpuOffloadAtypeDescription</description>
  <abbreviation>go</abbreviation>
  <alias>gpu-offload</alias>
  <int:schemaVersion>1</int:schemaVersion>
  <int:contentVersion>1</int:contentVersion>
  <iconClass>gpu solid</iconClass>
  <property name="helpId">intel.phe.configs.gpu_offload</property>
 </internal>
 <prerequisites xsl:version="1.0" exsl:keep_exsl_namespace="" syntax="norules">
  <xsl:copy-of select="document('config://analysis_type/include/require_connection.xsl?connections=group_generic')"/>
 </prerequisites>
 <knobs xsl:version="1.0" exsl:keep_exsl_namespace="" syntax="norules">
  <xsl:variable name="knobsParams">
   <params defaultMemoryBandwidth="false"/>
  </xsl:variable>
  <xsl:variable name="knobsParamsName">
   <xsl:text>config://analysis_type/include/knobs.xsl?</xsl:text>
   <xsl:for-each select="exsl:node-set($knobsParams)//@*">
    <xsl:value-of select="concat(name(), '=', .)"/>
    <xsl:text>&amp;</xsl:text>
   </xsl:for-each>
  </xsl:variable>
  <xsl:variable name="commonKnobs" select="document($knobsParamsName)"/>
  <stringKnob id="initialViewpoint" displayName="%InitialViewpoint" boolean:visible="false">
   <defaultValue>%CpuGpuInteractionViewpointName</defaultValue>
  </stringKnob>
  <stringKnob id="allowedViewpoints" boolean:visible="false">
   <defaultValue>%CpuGpuInteractionViewpointName,%InKernelProfilingViewpointName</defaultValue>
  </stringKnob>
  <xsl:copy-of select="$commonKnobs//knobs/enumKnob[@id='targetGPUAtk']"/>
  <booleanKnob id="gpuOpenCLCollection" displayName="%GpuTraceProgrammingAPIs" cliName="collect-programming-api">
   <description>%GpuOpenCLCollectionDescription</description>
   <boolean:defaultValue>true</boolean:defaultValue>
  </booleanKnob>
  <booleanKnob id="enableStackCollect" displayName="%EnableHostSideStackCollection" cliName="enable-stack-collection">
   <description>%EnableStackCollectionDescription</description>
   <boolean:defaultValue>true</boolean:defaultValue>
  </booleanKnob>
  <xsl:copy-of select="$commonKnobs//knobs/booleanKnob[@id='collectCPUGPUBandwidth']"/>
  <booleanKnob id="gpuHwCollection" displayName="%GpuPerformanceInsights" cliName="enable-characterization-insights">
   <description>%GpuPerformanceInsightsDescription</description>
   <boolean:defaultValue>true</boolean:defaultValue>
  </booleanKnob>
  <xsl:if test="exsl:ctx('targetOS', '') = 'Linux'">
   <booleanKnob id="analyzePowerUsage" displayName="%AnalyzePowerUsage" cliName="analyze-power-usage">
    <boolean:defaultValue>false</boolean:defaultValue>
    <description>%AnalyzePowerUsageDescription</description>
   </booleanKnob>
   <xsl:if test="exsl:ctx('isXelinkAvailable', 0)">
    <booleanKnob id="xelinkUsage" displayName="%AnalyzeXelinkUsage" cliName="analyze-xelink-usage">
     <boolean:defaultValue>false</boolean:defaultValue>
     <description>%AnalyzeXelinkUsageDescription</description>
    </booleanKnob>
   </xsl:if>
  </xsl:if>
 </knobs>
 <analysis xsl:version="1.0" str:keep_str_namespace="" exsl:keep_exsl_namespace="" syntax="norules">
  <collector id="runsa">
   <xsl:variable name="runtool" select="document('config://analysis_type/include/runtool.xsl')"/>
   <xsl:variable name="runtoolToUse" select="$runtool//variables/runtoolToUse"/>
   <xsl:attribute name="id">
    <xsl:value-of select="$runtoolToUse"/>
   </xsl:attribute>
   <xsl:variable name="gpuCollectionKnobs" select="document('config://analysis_type/include/gpu_collection_settings.xsl?gpuOffload=true')"/>
   <xsl:copy-of select="$gpuCollectionKnobs//knobs/hostCollector/*"/>
   <xsl:variable name="gpu_usage_offload" select="document('config://analysis_type/include/gpu_usage.xsl?errorLevel=warning')"/>
   <xsl:variable name="gpuUsageAvailable" select="$gpu_usage_offload//root/variables/gpuUsageAvailable"/>
   <xsl:if test="not($gpuUsageAvailable = 'true') and exsl:ctx('targetOS', '') = 'Windows'">
    <xsl:variable name="gpuUsageErrorMessage" select="$gpu_usage_offload//root/variables/gpuUsageErrorMessage"/>
    <xsl:variable name="gpuUsageErrorReason" select="exsl:message('analysis_type', string($gpuUsageErrorMessage))"/>
    <xsl:variable name="message" select="exsl:message('analysis_type', '%NoGPUUsageWarning', string($gpuUsageErrorReason))"/>
    <xsl:value-of select="exsl:warning($message)"/>
   </xsl:if>
   <collectorKnob knob="gpuUsage">
    <xsl:value-of select="$gpuUsageAvailable = 'true' and not(exsl:ctx('targetOS', '') = 'Linux')"/>
   </collectorKnob>
   <xsl:variable name="gpu_metric_sets" select="document('config://analysis_type/include/gpu_metric_sets.xsl')"/>
   <xsl:variable name="gpuCustomMetricSets" select="$gpu_metric_sets//metric_sets"/>
   <xsl:if test="exsl:ctx('targetOS', '') = 'Linux' or exsl:ctx('gpuHwCollection', 0) or not($gpuUsageAvailable = 'true')">
    <xsl:variable name="gpu">
     <xsl:value-of select="exsl:ctx('targetGPUAtk', exsl:ctx('preferedGpuAdapter', 'none'))"/>
    </xsl:variable>
    <xsl:variable name="knobValues">
     <xsl:for-each select="str:split($gpu, ',')">
      <xsl:variable name="targetGPUBDF" select="."/>
      <xsl:variable name="platformIndexTemp" select="substring-after(exsl:ctx('gpuPlatformIndexList', ''), concat($targetGPUBDF, '|'))"/>
      <xsl:variable name="platformIndex">
       <xsl:choose>
        <xsl:when test="contains($platformIndexTemp, ';')">
         <xsl:value-of select="substring-before($platformIndexTemp, ';')"/>
        </xsl:when>
        <xsl:otherwise>
         <xsl:value-of select="$platformIndexTemp"/>
        </xsl:otherwise>
       </xsl:choose>
      </xsl:variable>
      <xsl:variable name="commonDoc" select="document('config://collector/include/common.xsl')"/>
      <xsl:variable name="isGlobalAccessAvailable" select="string($commonDoc//common/variables/globalAccessExistance)"/>
      <xsl:variable name="metricGroup">
       <xsl:choose>
        <xsl:when test="$isGlobalAccessAvailable">global-memory-accesses</xsl:when>
        <xsl:otherwise>overview</xsl:otherwise>
       </xsl:choose>
      </xsl:variable>
      <xsl:variable name="gpuCustomMetricSet" select="exsl:node-set($gpuCustomMetricSets)/metric-set[name = $metricGroup and platformIndex = $platformIndex]"/>
      <xsl:choose>
       <xsl:when test="count(exsl:node-set($gpuCustomMetricSet)/item)">
        <gpuMetricsSelected>
         <xsl:for-each select="exsl:node-set($gpuCustomMetricSet)/item">
          <xsl:value-of select="."/>
          <xsl:text>:</xsl:text>
          <xsl:value-of select="$targetGPUBDF"/>
          <xsl:if test="position() != last()">
           <xsl:text>,</xsl:text>
          </xsl:if>
         </xsl:for-each>
        </gpuMetricsSelected>
        <gpuCounters>
         <xsl:value-of select="$targetGPUBDF"/>
         <xsl:text>|metric-set</xsl:text>
        </gpuCounters>
        <gpuFixedMetricsSelected>
         <xsl:for-each select="exsl:node-set($gpuCustomMetricSet)/item">
          <xsl:value-of select="."/>
          <xsl:text>:</xsl:text>
          <xsl:value-of select="$targetGPUBDF"/>
          <xsl:if test="position() != last()">
           <xsl:text>,</xsl:text>
          </xsl:if>
         </xsl:for-each>
        </gpuFixedMetricsSelected>
       </xsl:when>
       <xsl:otherwise>
        <gpuCounters>
         <xsl:value-of select="$targetGPUBDF"/>
         <xsl:text>|global-memory-accesses</xsl:text>
        </gpuCounters>
       </xsl:otherwise>
      </xsl:choose>
      <gpuSamplingInterval>
       <xsl:value-of select="$targetGPUBDF"/>
       <xsl:text>|1</xsl:text>
      </gpuSamplingInterval>
     </xsl:for-each>
    </xsl:variable>
    <collectorKnob knob="gpuSamplingInterval">
     <xsl:variable name="result">
      <xsl:for-each select="exsl:node-set($knobValues)/gpuSamplingInterval">
       <value>
        <xsl:value-of select="."/>
        <xsl:if test="not(position()=last())">,</xsl:if>
       </value>
      </xsl:for-each>
     </xsl:variable>
     <xsl:value-of select="concat(exsl:node-set($result), '')"/>
    </collectorKnob>
    <collectorKnob knob="gpuCounters">
     <xsl:variable name="result">
      <xsl:for-each select="exsl:node-set($knobValues)/gpuCounters">
       <value>
        <xsl:value-of select="."/>
        <xsl:if test="not(position()=last())">,</xsl:if>
       </value>
      </xsl:for-each>
     </xsl:variable>
     <xsl:value-of select="concat(exsl:node-set($result), '')"/>
    </collectorKnob>
    <collectorKnob knob="gpuMetricsSelected">
     <xsl:variable name="result">
      <xsl:for-each select="exsl:node-set($knobValues)/gpuMetricsSelected">
       <value>
        <xsl:value-of select="."/>
        <xsl:if test="not(position()=last())">,</xsl:if>
       </value>
      </xsl:for-each>
     </xsl:variable>
     <xsl:value-of select="concat(exsl:node-set($result), '')"/>
    </collectorKnob>
    <collectorKnob knob="gpuFixedMetricsSelected">
     <xsl:variable name="result">
      <xsl:for-each select="exsl:node-set($knobValues)/gpuFixedMetricsSelected">
       <value>
        <xsl:value-of select="."/>
        <xsl:if test="not(position()=last())">,</xsl:if>
       </value>
      </xsl:for-each>
     </xsl:variable>
     <xsl:value-of select="concat(exsl:node-set($result), '')"/>
    </collectorKnob>
   </xsl:if>
   <xsl:copy-of select="$gpuCollectionKnobs//knobs/inline/*"/>
   <xsl:copy-of select="$gpuCollectionKnobs//knobs/programming_apis/*"/>
   <collectorKnob knob="showGPUBandwidthHistogram">false</collectorKnob>
   <xsl:if test="exsl:ctx('analyzePowerUsage', 0)">
    <collectorKnob knob="analyzeEnergyConsumption">true</collectorKnob>
   </xsl:if>
   <xsl:if test="exsl:ctx('xelinkUsage', 0)">
    <collectorKnob knob="l0SysmanConfig">FabricThroughput:samplingInterval=1</collectorKnob>
   </xsl:if>
   <xsl:copy-of select="$gpuCollectionKnobs//knobs/cpuGPUBandwidth/*"/>
  </collector>
 </analysis>
</bag>
